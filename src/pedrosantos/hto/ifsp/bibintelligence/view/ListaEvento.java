/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pedrosantos.hto.ifsp.bibintelligence.view;

import pedrosantos.hto.ifsp.bibintelligence.controller.Conexao;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author lndosnw
 */
public class ListaEvento extends javax.swing.JFrame {

    int filtro=0;
    DefaultTableModel modelo;
    /**
     * Creates new form ListaEvento
     */
    public ListaEvento() {
        initComponents();
        modelo = (DefaultTableModel) tblEventos.getModel();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Eventos1 = new javax.swing.JPanel();
        jspEventos = new javax.swing.JScrollPane();
        tblEventos = new javax.swing.JTable();
        btFechar = new javax.swing.JButton();
        jpFiltro = new javax.swing.JPanel();
        lbDataInicial = new javax.swing.JLabel();
        lbDataFinal = new javax.swing.JLabel();
        lbEvento = new javax.swing.JLabel();
        btFiltrarNaoFiltrar = new javax.swing.JButton();
        jsDataInicial = new javax.swing.JSpinner();
        jsDataFinal = new javax.swing.JSpinner();
        cbEvento = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Log de Eventos");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        tblEventos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "data", "usuario logado", "referencia", "evento"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblEventos.setColumnSelectionAllowed(true);
        jspEventos.setViewportView(tblEventos);

        javax.swing.GroupLayout Eventos1Layout = new javax.swing.GroupLayout(Eventos1);
        Eventos1.setLayout(Eventos1Layout);
        Eventos1Layout.setHorizontalGroup(
            Eventos1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 954, Short.MAX_VALUE)
            .addGroup(Eventos1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jspEventos, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 720, Short.MAX_VALUE))
        );
        Eventos1Layout.setVerticalGroup(
            Eventos1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 549, Short.MAX_VALUE)
            .addGroup(Eventos1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(Eventos1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jspEventos, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE)))
        );

        btFechar.setText("Fechar");
        btFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btFecharActionPerformed(evt);
            }
        });

        lbDataInicial.setText("Data Inicial:");

        lbDataFinal.setText("Data Final:");

        lbEvento.setText("Evento:");

        btFiltrarNaoFiltrar.setText("Filtrar");
        btFiltrarNaoFiltrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btFiltrarNaoFiltrarActionPerformed(evt);
            }
        });

        jsDataInicial.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(946692060000L), new java.util.Date(-30578158740000L), new java.util.Date(), java.util.Calendar.DAY_OF_MONTH));
        jsDataInicial.setEditor(new javax.swing.JSpinner.DateEditor(jsDataInicial, "dd/MM/yyyy"));

        jsDataFinal.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), new java.util.Date(-30578158740000L), new java.util.Date(), java.util.Calendar.DAY_OF_MONTH));
        jsDataFinal.setEditor(new javax.swing.JSpinner.DateEditor(jsDataFinal, "dd/MM/yyyy"));

        javax.swing.GroupLayout jpFiltroLayout = new javax.swing.GroupLayout(jpFiltro);
        jpFiltro.setLayout(jpFiltroLayout);
        jpFiltroLayout.setHorizontalGroup(
            jpFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpFiltroLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbDataInicial)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jsDataInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lbDataFinal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jsDataFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbEvento)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbEvento, 0, 472, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btFiltrarNaoFiltrar))
        );
        jpFiltroLayout.setVerticalGroup(
            jpFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpFiltroLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbDataInicial)
                    .addComponent(lbDataFinal)
                    .addComponent(lbEvento)
                    .addComponent(btFiltrarNaoFiltrar)
                    .addComponent(jsDataInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jsDataFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbEvento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpFiltro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(431, 431, 431)
                .addComponent(btFechar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(Eventos1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jpFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 552, Short.MAX_VALUE)
                .addComponent(btFechar)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(46, 46, 46)
                    .addComponent(Eventos1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(43, Short.MAX_VALUE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFecharActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btFecharActionPerformed

    private void btFiltrarNaoFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFiltrarNaoFiltrarActionPerformed
        // TODO add your handling code here:
        if(filtro==0){
            filtro=1;
            formWindowActivated(null);
            btFiltrarNaoFiltrar.setText("Retirar Filtro");
        }else{
            filtro=0;
            formWindowActivated(null);
            btFiltrarNaoFiltrar.setText("Filtrar");
        }
        
        
    }//GEN-LAST:event_btFiltrarNaoFiltrarActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        //SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yy");
        

        //preencher lista
        System.out.println("selecteditem= "+cbEvento.getSelectedItem());
        System.out.println("selectedindex= "+cbEvento.getSelectedIndex());
        modelo.setNumRows(0);
        if(filtro==0){
            try{
                    String SQL = "call listaEventos(0,null,null,null)";
                    while(Conexao.getResultSet(SQL).next()){
                        modelo.addRow(new Object[]{Conexao.getRsInt("idEvento"), Conexao.getRsDate("dataEvento"), Conexao.getRsString("usuariologado"), Conexao.getRsString("ref"),Conexao.getRsString("evento")});
                    }
                }catch(SQLException ex){
                           System.out.println("SQLException: " + ex.getMessage());
                           System.out.println("SQLState: " + ex.getSQLState());
                           System.out.println("VendorError: " + ex.getErrorCode());
                  }
                  catch(Exception e){
                        System.out.println("Problemas ao tentar conectar com o banco de dados");	
                }
                finally{
                    try{
                        Conexao.finalizaUso(); //finaliza o uso da conexao
                    }catch(SQLException onConClose){
                    //System.out.println("Houve erro no fechamento da conexão");
                    JOptionPane.showMessageDialog(null,"Erro na conexão, com o banco de dados!","Erro Ao Logar",JOptionPane.WARNING_MESSAGE);
                    onConClose.printStackTrace();
                    }    
                }
        }
        else if(cbEvento.getSelectedIndex()==0){
            try{
                    System.out.println("debug== "+dateFormat.format(jsDataInicial.getValue()));
                    String SQL = "call listaEventos(1,\'"+dateFormat.format(jsDataInicial.getValue())+"\',\'"+dateFormat.format(jsDataFinal.getValue())+"\',null)";
                    System.out.println("debug.sql== "+SQL);
                    while(Conexao.getResultSet(SQL).next()){
                        modelo.addRow(new Object[]{Conexao.getRsInt("idEvento"), Conexao.getRsDate("dataEvento"), Conexao.getRsString("usuariologado"), Conexao.getRsString("ref"),Conexao.getRsString("evento")});
                    }
                }catch(SQLException ex){
                           System.out.println("SQLException: " + ex.getMessage());
                           System.out.println("SQLState: " + ex.getSQLState());
                           System.out.println("VendorError: " + ex.getErrorCode());
                  }
                  catch(Exception e){
                        System.out.println("Problemas ao tentar conectar com o banco de dados");	
                }
                finally{
                    try{
                        Conexao.finalizaUso(); //finaliza o uso da conexao
                    }catch(SQLException onConClose){
                    //System.out.println("Houve erro no fechamento da conexão");
                    JOptionPane.showMessageDialog(null,"Erro na conexão, com o banco de dados!","Erro Ao Logar",JOptionPane.WARNING_MESSAGE);
                    onConClose.printStackTrace();
                    }    
                }
        } 
        else{
            try{
                    int eventoindexcb=cbEvento.getSelectedIndex()-1;
                    String SQL = "call listaEventos(2,\'"+dateFormat.format(jsDataInicial.getValue())+"\',\'"+dateFormat.format(jsDataFinal.getValue())+"\',"+eventoindexcb+")";
                    while(Conexao.getResultSet(SQL).next()){
                        modelo.addRow(new Object[]{Conexao.getRsInt("idEvento"), Conexao.getRsDate("dataEvento"), Conexao.getRsString("usuariologado"), Conexao.getRsString("ref"),Conexao.getRsString("evento")});
                    }
                }catch(SQLException ex){
                           System.out.println("SQLException: " + ex.getMessage());
                           System.out.println("SQLState: " + ex.getSQLState());
                           System.out.println("VendorError: " + ex.getErrorCode());
                  }
                  catch(Exception e){
                        System.out.println("Problemas ao tentar conectar com o banco de dados");	
                }
                finally{
                    try{
                        Conexao.finalizaUso(); //finaliza o uso da conexao
                    }catch(SQLException onConClose){
                    //System.out.println("Houve erro no fechamento da conexão");
                    JOptionPane.showMessageDialog(null,"Erro na conexão, com o banco de dados!","Erro Ao Logar",JOptionPane.WARNING_MESSAGE);
                    onConClose.printStackTrace();
                    }    
                }
        }
        //preencher combo box eventos
        cbEvento.removeAllItems();
        try{
            cbEvento.addItem("Todos");
            while(Conexao.getResultSet("SELECT * FROM codigoevento").next()){ 
			String evento = Conexao.getRsString("descricao");
                        cbEvento.addItem(evento);
		  }
                  
		  } 
		  catch(SQLException ex){
			   System.out.println("SQLException: " + ex.getMessage());
			   System.out.println("SQLState: " + ex.getSQLState());
			   System.out.println("VendorError: " + ex.getErrorCode());
		  }
		  catch(Exception e){
			System.out.println("Problemas ao tentar conectar com o banco de dados");	
		}
                finally{
                    try{
                        Conexao.finalizaUso(); //finaliza o uso da conexao
                    }catch(SQLException onConClose){
                    //System.out.println("Houve erro no fechamento da conexão");
                    JOptionPane.showMessageDialog(null,"Erro na conexão, com o banco de dados!","Erro Ao Logar",JOptionPane.WARNING_MESSAGE);
                    onConClose.printStackTrace();
                    }    
        }
    }//GEN-LAST:event_formWindowActivated

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListaEvento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListaEvento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListaEvento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListaEvento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ListaEvento().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Eventos1;
    private javax.swing.JButton btFechar;
    private javax.swing.JButton btFiltrarNaoFiltrar;
    private javax.swing.JComboBox<String> cbEvento;
    private javax.swing.JPanel jpFiltro;
    private javax.swing.JSpinner jsDataFinal;
    private javax.swing.JSpinner jsDataInicial;
    private javax.swing.JScrollPane jspEventos;
    private javax.swing.JLabel lbDataFinal;
    private javax.swing.JLabel lbDataInicial;
    private javax.swing.JLabel lbEvento;
    private javax.swing.JTable tblEventos;
    // End of variables declaration//GEN-END:variables
}
